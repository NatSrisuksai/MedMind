"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Header from "@/components/Header";
import MedicineForm from "@/components/MedicineForm";
import { MedicineFormData } from "@/types/medicine";
import QRCode from "react-qr-code";

export default function MedicinePage() {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showQR, setShowQR] = useState(false);
  const [prescriptionResult, setPrescriptionResult] = useState<any>(null);

  const handleSubmit = async (formData: MedicineFormData) => {
    setIsSubmitting(true);
    
    try {
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡πá‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏õ‡πá‡∏ô periods array
      const periods = [];
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡πà‡∏≠‡∏ô/‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
      const beforeMeal = formData.beforeMeal && !formData.afterMeal;
      const afterMeal = !formData.beforeMeal && formData.afterMeal;
      
      if (formData.morning > 0) {
        periods.push({
          period: "MORNING" as const,
          hhmm: beforeMeal ? "07:30" : afterMeal ? "08:30" : "08:00",
          pills: formData.morning
        });
      }
      
      if (formData.noon > 0) {
        periods.push({
          period: "NOON" as const,
          hhmm: beforeMeal ? "11:30" : afterMeal ? "12:30" : "12:00",
          pills: formData.noon
        });
      }
      
      if (formData.evening > 0) {
        periods.push({
          period: "EVENING" as const,
          hhmm: beforeMeal ? "17:30" : afterMeal ? "18:30" : "18:00",
          pills: formData.evening
        });
      }
      
      if (formData.night > 0) {
        periods.push({
          period: "BEDTIME" as const,
          hhmm: "20:00", // ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏™‡∏°‡∏≠
          pills: formData.night
        });
      }

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î method
      let method: "BEFORE_MEAL" | "AFTER_MEAL" | "WITH_MEAL" | "NONE" = "NONE";
      if (formData.beforeMeal && !formData.afterMeal) {
        method = "BEFORE_MEAL";
      } else if (formData.afterMeal && !formData.beforeMeal) {
        method = "AFTER_MEAL";
      } else if (formData.beforeMeal && formData.afterMeal) {
        method = "WITH_MEAL";
      }

      const requestData = {
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
        patientFirstName: formData.firstName,
        patientLastName: formData.lastName,
        hn: formData.hn || undefined,
        age: formData.age || undefined,
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏¢‡∏≤
        issueDate: formData.issueDate,
        drugName: formData.medicineName,
        quantityTotal: formData.totalAmount,
        method: method,
        timezone: "Asia/Bangkok",
        startDate: formData.issueDate,
        // Backend ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì endDate ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        notes: formData.notes || undefined,
        
        // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏¢‡∏≤
        periods: periods
      };

      console.log('Sending data:', requestData);

      const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/prescriptions`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestData),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Failed to save');
      }

      const result = await response.json();
      console.log('Response:', result);
      
      // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á QR
      setPrescriptionResult({
        ...result,
        patient: {
          fullName: `${formData.firstName} ${formData.lastName}`,
          hn: formData.hn,
          age: formData.age
        },
        prescription: {
          drugName: formData.medicineName,
          strength: formData.strength,
          totalAmount: formData.totalAmount,
          morning: formData.morning,
          noon: formData.noon,
          evening: formData.evening,
          night: formData.night,
          beforeMeal: formData.beforeMeal,
          afterMeal: formData.afterMeal,
          issueDate: formData.issueDate,
          notes: formData.notes
        }
      });
      setShowQR(true);
      
    } catch (error) {
      console.error('Error saving medicine:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + (error as Error).message);
    } finally {
      setIsSubmitting(false);
    }
  };

  // ‡∏ñ‡πâ‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ QR Code
  if (showQR && prescriptionResult) {
    const qrUrl = `https://liff.line.me/${process.env.NEXT_PUBLIC_LIFF_ID}?opaqueId=${prescriptionResult.opaqueId}`;
    
    return (
      <>
        <Header />
        <div className="container mx-auto px-4 py-6">
          <div className="bg-white rounded-lg shadow p-8 max-w-3xl mx-auto">
            <div className="border-2 border-gray-300 p-8" id="prescription-print">
              <div className="text-center mb-6">
                <h2 className="text-2xl font-bold">‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏¢‡∏≤</h2>
              </div>

              {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ */}
              <div className="mb-6">
                <div className="flex justify-between mb-2">
                  <span><strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> {prescriptionResult.patient?.fullName}</span>
                  <span><strong>HN:</strong> {prescriptionResult.patient?.hn || '-'}</span>
                </div>
                {prescriptionResult.patient?.age && (
                  <div>
                    <span><strong>‡∏≠‡∏≤‡∏¢‡∏∏:</strong> {prescriptionResult.patient.age} ‡∏õ‡∏µ</span>
                  </div>
                )}
                <div>
                  <span><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> {new Date(prescriptionResult.prescription?.issueDate).toLocaleDateString('th-TH')}</span>
                </div>
              </div>

              {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤ */}
              <div className="border-t pt-4 mb-6">
                <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤:</strong> {prescriptionResult.prescription?.drugName} {prescriptionResult.prescription?.strength}</p>
                <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong> {prescriptionResult.prescription?.totalAmount} ‡πÄ‡∏°‡πá‡∏î</p>
                <p><strong>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô:</strong> {
                  prescriptionResult.prescription?.beforeMeal && !prescriptionResult.prescription?.afterMeal ? "‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£" :
                  prescriptionResult.prescription?.afterMeal && !prescriptionResult.prescription?.beforeMeal ? "‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£" :
                  prescriptionResult.prescription?.beforeMeal && prescriptionResult.prescription?.afterMeal ? "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£" : "-"
                }</p>
                {prescriptionResult.prescription?.notes && (
                  <p><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {prescriptionResult.prescription.notes}</p>
                )}
              </div>

              {/* ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤ */}
              <div className="grid grid-cols-4 gap-4 mb-6">
                <div className="text-center">
                  <div className="w-20 h-20 mx-auto border-2 border-gray-300 rounded-lg flex items-center justify-center text-3xl">
                    üåÖ
                  </div>
                  <div className="mt-2">‡πÄ‡∏ä‡πâ‡∏≤</div>
                  <div className="font-bold">
                    {prescriptionResult.prescription?.morning > 0 
                      ? `${prescriptionResult.prescription.morning} ‡πÄ‡∏°‡πá‡∏î` 
                      : '-'}
                  </div>
                </div>
                <div className="text-center">
                  <div className="w-20 h-20 mx-auto border-2 border-gray-300 rounded-lg flex items-center justify-center text-3xl">
                    ‚òÄÔ∏è
                  </div>
                  <div className="mt-2">‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô</div>
                  <div className="font-bold">
                    {prescriptionResult.prescription?.noon > 0 
                      ? `${prescriptionResult.prescription.noon} ‡πÄ‡∏°‡πá‡∏î` 
                      : '-'}
                  </div>
                </div>
                <div className="text-center">
                  <div className="w-20 h-20 mx-auto border-2 border-gray-300 rounded-lg flex items-center justify-center text-3xl">
                    üåÜ
                  </div>
                  <div className="mt-2">‡πÄ‡∏¢‡πá‡∏ô</div>
                  <div className="font-bold">
                    {prescriptionResult.prescription?.evening > 0 
                      ? `${prescriptionResult.prescription.evening} ‡πÄ‡∏°‡πá‡∏î` 
                      : '-'}
                  </div>
                </div>
                <div className="text-center">
                  <div className="w-20 h-20 mx-auto border-2 border-gray-300 rounded-lg flex items-center justify-center text-3xl">
                    üåô
                  </div>
                  <div className="mt-2">‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≠‡∏ô</div>
                  <div className="font-bold">
                    {prescriptionResult.prescription?.night > 0 
                      ? `${prescriptionResult.prescription.night} ‡πÄ‡∏°‡πá‡∏î` 
                      : '-'}
                  </div>
                </div>
              </div>

              {/* ‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á: QR Code */}
              <div className="flex justify-between items-end">
                <div className="flex gap-2">
                  <button className={`px-4 py-2 rounded ${
                    prescriptionResult.prescription?.beforeMeal ? 'bg-cyan-500 text-white' : 'bg-gray-300'
                  }`}>
                    ‡∏Å‡πà‡∏≠‡∏ô
                  </button>
                  <button className={`px-4 py-2 rounded ${
                    prescriptionResult.prescription?.afterMeal ? 'bg-cyan-500 text-white' : 'bg-gray-300'
                  }`}>
                    ‡∏´‡∏•‡∏±‡∏á
                  </button>
                </div>
                
                <div className="text-center">
                  <p className="text-xs mb-2">
                    ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏≤<br/>
                    ‡∏™‡πÅ‡∏Å‡∏ô QR Code<br/>
                    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô<br/>
                    ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ LINE
                  </p>
                  <div className="border-2 border-black p-2">
                    <QRCode value={qrUrl} size={100} />
                  </div>
                </div>

                <button
                  onClick={() => window.print()}
                  className="px-4 py-2 bg-cyan-500 text-white rounded hover:bg-cyan-600 no-print"
                >
                  Print
                </button>
              </div>

              <div className="text-right mt-4 text-xs text-gray-600">
                ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å Medmind Data System<br/>
                {new Date().toLocaleDateString('th-TH')}
              </div>
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á */}
            <div className="mt-6 flex gap-4 no-print">
              <button
                onClick={async () => {
                  // Download PDF
                  const element = document.getElementById('prescription-print');
                  if (element && (window as any).html2canvas && (window as any).jsPDF) {
                    const canvas = await (window as any).html2canvas(element);
                    const imgData = canvas.toDataURL('image/png');
                    const pdf = new (window as any).jsPDF();
                    const imgWidth = 210;
                    const imgHeight = (canvas.height * imgWidth) / canvas.width;
                    pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
                    pdf.save(`prescription_${prescriptionResult.patient?.hn || 'patient'}_${Date.now()}.pdf`);
                  }
                }}
                className="flex-1 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 flex items-center justify-center gap-2"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                </svg>
                Download PDF
              </button>
              <button
                onClick={() => router.push('/dashboard')}
                className="flex-1 px-4 py-2 bg-cyan-500 text-white rounded hover:bg-cyan-600"
              >
                ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
              </button>
              <button
                onClick={() => {
                  setShowQR(false);
                  setPrescriptionResult(null);
                }}
                className="flex-1 px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
              >
                ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà
              </button>
            </div>
          </div>
        </div>
      </>
    );
  }

  // ‡∏´‡∏ô‡πâ‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  return (
    <>
      <Header />
      <div className="container mx-auto px-4 py-6">
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-bold mb-6">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤</h2>
          <MedicineForm 
            onSubmit={handleSubmit}
            isSubmitting={isSubmitting}
          />
        </div>
      </div>
    </>
  );
}